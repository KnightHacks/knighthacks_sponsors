scalar Time

directive @goModel(model: String, models: [String!]) on OBJECT
    | INPUT_OBJECT
    | SCALAR
    | ENUM
    | INTERFACE
    | UNION

directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
    | FIELD_DEFINITION

directive @hasRole(role: Role!) on FIELD_DEFINITION | OBJECT # set minimum layer of security
directive @pagination(maxLength: Int!) on FIELD_DEFINITION

enum Role @goModel(model: "github.com/KnightHacks/knighthacks_shared/models.Role") {
    ADMIN
    """
    for now keep this the same
    """
    SPONSOR
    NORMAL
    OWNS
}

interface Connection {
    # The total number of entries
    totalCount: Int
    # Information for paginating this connection
    pageInfo: PageInfo!
}

type PageInfo @goModel(model: "github.com/KnightHacks/knighthacks_shared/models.PageInfo") {
    # the first entry
    startCursor: String!
    # the last entry
    endCursor: String!
}

type SponsorsConnection implements Connection {
    totalCount: Int!
    pageInfo: PageInfo!

    sponsors: [Sponsor!]!
}

type Sponsor @key(fields: "id") {
  id: ID!
  name: String!
  tier: SubscriptionTier!
  since: Time!
  description: String
  website: String
  logo: String
}

enum SubscriptionTier {
    BRONZE
    SILVER
    GOLD
    PLATINUM
}

input SponsorFilter {
    tiers: [SubscriptionTier!]
}

type Query {
  sponsors(filter: SponsorFilter, first: Int!, after: String): SponsorsConnection! @pagination(maxLength: 25)
}

input NewSponsor {
  name: String!
  tier: SubscriptionTier!
  since: Time
  description: String
  website: String
  logo: String
}

input UpdatedSponsor {
  name: String
  tier: SubscriptionTier
  since: Time
  description: String
  website: String
  logo: String
}

type Mutation {
  createSponsor(input: NewSponsor!): Sponsor! @hasRole(role: ADMIN)
  updateSponsor(id: ID!, input: UpdatedSponsor!): Sponsor! @hasRole(role: ADMIN)
  deleteSponsor(id: ID!): Boolean! @hasRole(role: ADMIN)
}
